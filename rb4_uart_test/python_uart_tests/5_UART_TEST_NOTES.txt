UART TEST 1 SETUP--------------------------------------------------------------------------
uart0: setup for task receiver, used for transmitting data from cpp/linux
uart1: setup as debugger/used to log received data

transmitter will send 8 bit data with 1kHz, 
meaning 16 bit data with ca 500Hz
data is a counter starting from 0 reaching just under 5000

python script logging 16-bit data to csv

Baudrate: 115200

Sender: 1kHz transmission rate
Using FIFOs on both uart1 and uart0
#define configCPU_CLOCK_HZ          ( ( unsigned long ) 16000000 )
#define configTICK_RATE_HZ          ( ( portTickType ) 1000 )

UART CODE  ----------------------------------------------------------------------------


TASK CODE (Same as before)-------------------------------------------------------------------------------
void vUartRxTask(void *pv) {
    TickType_t lastWake = xTaskGetTickCount();
        INT16U rx;
        for (;;) {
            FSM_STATUS = URTRX;
            rx = uart_get_16int(0);
            //xQueueSend(xUartTxQueue, &rx, pdMS_TO_TICKS(50));
                  uart_send_16int(1, rx);
            //vTaskDelayUntil(&lastWake, pdMS_TO_TICKS(5));
        }
}

eliminating delay as it is a benchmark test

DATA TRANSMITTED ---------------------------------------------------------------------------
transmitted the same as always, counter from 0
DATA RECEIVED -----------------------------------------------------------------------------
index	low	high	dec	hex
index	high_hex	low_hex	value
0	0x00	0x00	0
1	0x00	0x01	1
2	0x00	0x02	2
3	0x00	0x03	3
4	0x00	0x04	4
5	0x00	0x05	5
6	0x00	0x06	6
7	0x00	0x07	7
8	0x00	0x08	8
9	0x00	0x09	9
10	0x00	0x0A	10
11	0x00	0x0B	11
12	0x00	0x0C	12
13	0x00	0x0D	13
14	0x00	0x0E	14
15	0x00	0x0F	15
16	0x00	0x10	16
17	0x00	0x11	17
18	0x00	0x12	18
19	0x00	0x13	19
20	0x00	0x14	20
21	0x00	0x15	21
22	0x00	0x16	22
23	0x00	0x17	23
OUTTAKE ^^^^

NOTES ------------------------------------------------------------------------------------
No overflow 
I COULD implement no fifo and/or interrupt but i will first test if it can handle 10kHz

10kHz TEST ----------------------------------------------------------------------------------
index	high_hex	low_hex	value
0	0xB1	0x00	45312
1	0xB2	0x00	45568
2	0xB3	0x00	45824
3	0xB4	0x00	46080
4	0xB5	0x00	46336
5	0xB6	0x00	46592
6	0xB7	0x00	46848
7	0xB8	0x00	47104
8	0xB9	0x00	47360
9	0xBA	0x00	47616
10	0xBB	0x00	47872
11	0xBC	0x00	48128
12	0xBD	0x00	48384
13	0xBE	0x00	48640
14	0xBF	0x00	48896
15	0xC0	0x00	49152
16	0xC1	0x00	49408
17	0xC2	0x00	49664
18	0xC3	0x00	49920
19	0xC4	0x00	50176
20	0xC5	0x00	50432
21	0xC6	0x00	50688
22	0xC7	0x00	50944
23	0xC8	0x00	51200
24	0xC9	0x00	51456
25	0xCA	0x00	51712
26	0xCB	0x00	51968
27	0xCC	0x00	52224
28	0xCD	0x00	52480
29	0xCE	0x00	52736
30	0xCF	0x00	52992
31	0xD0	0x00	53248
32	0xD1	0x00	53504
33	0xD2	0x00	53760
34	0xD3	0x00	54016
35	0xD4	0x00	54272
36	0xD5	0x00	54528
37	0xD6	0x00	54784
38	0xD7	0x00	55040
39	0xD8	0x00	55296
40	0xD9	0x00	55552
41	0xDA	0x00	55808
42	0xDB	0x00	56064
43	0xDC	0x00	56320
44	0xDD	0x00	56576
45	0xDE	0x00	56832
46	0xDF	0x00	57088
47	0xE0	0x00	57344
48	0xE1	0x00	57600
49	0xE2	0x00	57856
50	0xE3	0x00	58112
51	0xE4	0x00	58368
52	0xE5	0x00	58624
53	0xE6	0x00	58880
54	0xE7	0x00	59136
55	0xE8	0x00	59392
56	0xE9	0x00	59648
57	0xEA	0x00	59904
58	0xEB	0x00	60160
59	0xEC	0x00	60416
60	0xED	0x00	60672
61	0xEE	0x00	60928
62	0xEF	0x00	61184
63	0xF0	0x00	61440
64	0xF1	0x00	61696
65	0xF2	0x00	61952
66	0xF3	0x00	62208
67	0xF4	0x00	62464
68	0xF5	0x00	62720
69	0xF6	0x00	62976
70	0xF7	0x00	63232
71	0xF8	0x00	63488
72	0xF9	0x00	63744
73	0xFA	0x00	64000
74	0xFB	0x00	64256
75	0xFC	0x00	64512
76	0xFD	0x00	64768
77	0xFE	0x00	65024
78	0xFF	0x00	65280
79	0x00	0x00	0
80	0x01	0x01	257
81	0x02	0x01	513
82	0x03	0x01	769
83	0x04	0x01	1025
84	0x05	0x01	1281
85	0x06	0x01	1537
86	0x07	0x01	1793
87	0x08	0x01	2049
88	0x09	0x01	2305
89	0x0A	0x01	2561
90	0x0B	0x01	2817
91	0x0C	0x01	3073
92	0x0D	0x01	3329
93	0x0E	0x01	3585
94	0x0F	0x01	3841
95	0x10	0x01	4097
96	0x11	0x01	4353
97	0x12	0x01	4609
98	0x13	0x01	4865
99	0x14	0x01	5121
100	0x15	0x01	5377
101	0x16	0x01	5633
102	0x17	0x01	5889
103	0x18	0x01	6145
104	0x19	0x01	6401
105	0x1A	0x01	6657
106	0x1B	0x01	6913
107	0x1C	0x01	7169
108	0x1D	0x01	7425
109	0x1E	0x01	7681
110	0x1F	0x01	7937
111	0x20	0x01	8193
112	0x21	0x01	8449
113	0x22	0x01	8705

NOTES------------------------------------------------------------------------------
overflowing at 79??

5kHz TEST -------------------------------------------------------------------------
index	high_hex	low_hex	value
0	0x01	0x1A	282
1	0x01	0x1B	283
2	0x01	0x1C	284
3	0x01	0x1D	285
4	0x01	0x1E	286
5	0x01	0x1F	287
6	0x01	0x20	288
7	0x01	0x21	289
8	0x01	0x22	290
9	0x01	0x23	291
10	0x01	0x24	292
11	0x01	0x25	293
12	0x01	0x26	294
13	0x01	0x27	295
14	0x01	0x28	296
15	0x01	0x29	297
16	0x01	0x2A	298
17	0x01	0x2B	299
18	0x01	0x2C	300
19	0x01	0x2D	301
20	0x01	0x2E	302
21	0x01	0x2F	303
22	0x01	0x30	304
23	0x01	0x31	305


NOTES ---------------------------------------------------------------------------------
Maybe i started too late cause there are no missing samples?

We have 8N1 dataframe:
BAUD: 115200/9 bits = 12800
but we send 9*2 = 18 bits as a contigious 16 bit data point
so: 12800/2 = 6400 Hz samplerate AT MOST (with this baudrate)

6 kHz TEST ----------------------------------------------------------------------------------
index	high_hex	low_hex	value
0	0x54	0x02	21506
1	0x55	0x02	21762
2	0x56	0x02	22018
3	0x57	0x02	22274
4	0x58	0x02	22530
5	0x59	0x02	22786
6	0x5A	0x02	23042
7	0x5B	0x02	23298
8	0x5C	0x02	23554
9	0x5D	0x02	23810
10	0x5E	0x02	24066
11	0x5F	0x02	24322
12	0x60	0x02	24578
13	0x61	0x02	24834
14	0x62	0x02	25090
15	0x63	0x02	25346
16	0x64	0x02	25602
17	0x65	0x02	25858
18	0x66	0x02	26114
19	0x67	0x02	26370
20	0x68	0x02	26626
21	0x69	0x02	26882
22	0x6A	0x02	27138
23	0x6B	0x02	27394
24	0x6C	0x02	27650
25	0x6D	0x02	27906
26	0x6E	0x02	28162
27	0x6F	0x02	28418
28	0x70	0x02	28674
29	0x71	0x02	28930
30	0x72	0x02	29186
31	0x73	0x02	29442
32	0x74	0x02	29698
33	0x75	0x02	29954
34	0x76	0x02	30210
35	0x77	0x02	30466
36	0x78	0x02	30722
37	0x79	0x02	30978
38	0x7A	0x02	31234
39	0x7B	0x02	31490
40	0x7C	0x02	31746
41	0x7D	0x02	32002
42	0x7E	0x02	32258
43	0x7F	0x02	32514
44	0x80	0x02	32770
45	0x81	0x02	33026
46	0x82	0x02	33282
47	0x83	0x02	33538
48	0x84	0x02	33794
49	0x85	0x02	34050
50	0x86	0x02	34306
51	0x87	0x02	34562
52	0x88	0x02	34818
53	0x89	0x02	35074
54	0x8A	0x02	35330
55	0x8B	0x02	35586
56	0x8C	0x02	35842
57	0x8D	0x02	36098
58	0x8E	0x02	36354
59	0x8F	0x02	36610
60	0x90	0x02	36866
61	0x91	0x02	37122
62	0x92	0x02	37378
63	0x93	0x02	37634
64	0x94	0x02	37890
65	0x95	0x02	38146
66	0x96	0x02	38402
NOTES ------------------------------------------------------------------------
probably still some delays?
better stick to 5Khz

OH because in actuality its more like 8N2 when transmitting so that is
5760Hz at most

5700Hz test was the same -- couldnt support
5500Hz is a success!
5500Hz TEST -----------------------------------------------------------------------
index	high_hex	low_hex	value
0	0x03	0x33	819
1	0x03	0x34	820
2	0x03	0x35	821
3	0x03	0x36	822
4	0x03	0x37	823
5	0x03	0x38	824
6	0x03	0x39	825
7	0x03	0x3A	826
8	0x03	0x3B	827
9	0x03	0x3C	828
10	0x03	0x3D	829
11	0x03	0x3E	830
12	0x03	0x3F	831
13	0x03	0x40	832
14	0x03	0x41	833
15	0x03	0x42	834
16	0x03	0x43	835
17	0x03	0x44	836
18	0x03	0x45	837
19	0x03	0x46	838
20	0x03	0x47	839
21	0x03	0x48	840
22	0x03	0x49	841
23	0x03	0x4A	842
24	0x03	0x4B	843
25	0x03	0x4C	844
26	0x03	0x4D	845
27	0x03	0x4E	846
28	0x03	0x4F	847
29	0x03	0x50	848
30	0x03	0x51	849
31	0x03	0x52	850
32	0x03	0x53	851
33	0x03	0x54	852
34	0x03	0x55	853
35	0x03	0x56	854
36	0x03	0x57	855
37	0x03	0x58	856
38	0x03	0x59	857
39	0x03	0x5A	858
40	0x03	0x5B	859
